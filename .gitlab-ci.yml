# This file is a template, and might need editing before it works on your project.
# Official docker image.
image: docker:latest

variables:
  NO_PROXY: "127.0.0.1, localhost, docker, registry, *.gotfix.com"
  DOCKER_DRIVER: overlay
  DOCKER_HUB_BASE: gotfix/gitlab
  GITHUB_REPO_URL: https://phpb-com:${GITHUB_TOKEN}@github.com/phpb-com/docker-gitlab.git

services:
  - docker:dind

stages:
 - build
 - test
 - release
 - mirror

before_script:
  - export VCS_REF=${CI_COMMIT_SHA:0:7}
  - export VCS_BRANCH=${CI_COMMIT_REF_NAME}
  - export IMAGE_TAG=${CI_COMMIT_REF_SLUG}
  - export IMAGE_TAG_SHA=${VCS_REF}
  - export REGISTRY_IMAGE_BASE=${DOCKER_HUB_BASE}
  - export REGISTRY_IMAGE="${REGISTRY_IMAGE_BASE}:${IMAGE_TAG_SHA}"
  - docker login -u "${DOCKER_USER}" -p "${DOCKER_PASS}"

build:
  stage: build
  script:
    - docker build 
        --build-arg=http_proxy=${HTTP_PROXY}
        --build-arg=HTTP_PROXY=${HTTP_PROXY}
        --build-arg BUILD_DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
        --build-arg VCS_REF=${VCS_REF}
        --build-arg VCS_BRANCH=${VCS_BRANCH}
        --build-arg VERSION=$(cat VERSION)
        --pull -t "${REGISTRY_IMAGE}" .
    - docker push "${REGISTRY_IMAGE}"
  except:
    - latest

image-test:
  stage: test
  script:
    - echo "Pulling docker container ${REGISTRY_IMAGE} ..."
    - docker pull ${REGISTRY_IMAGE}
    - echo "Pulling and starting postgresql containers ..."
    - docker pull gotfix/postgresql:latest
    - docker run --name=gitlab-postgresql -d
        --env='DB_NAME=gitlabhq_production' 
        --env='DB_EXTENSION=pg_trgm'
        --env='DB_USER=gitlab' --env='DB_PASS=password'
        gotfix/postgresql:latest
    - echo "Pulling and starting redis containers ..."
    - docker run --name=gitlab-redis -d
        gotfix/redis:latest
    - echo "Starting ${REGISTRY_IMAGE} container..."
    - docker run --name=gitlab-test -d
        --link=gitlab-postgresql:postgresql --link=gitlab-redis:redisio
        --publish=40022:22 --publish=40080:80
        --env="GITLAB_PORT=40080" --env="GITLAB_SSH_PORT=40022"
        --env="GITLAB_SECRETS_DB_KEY_BASE=${CI_COMMIT_SHA}"
        --env="GITLAB_SECRETS_SECRET_KEY_BASE=${CI_COMMIT_SHA}"
        --env="GITLAB_SECRETS_OTP_KEY_BASE=${CI_COMMIT_SHA}"
        --env="GITLAB_MONITOR_ENABLED=true"
        --env="GITLAB_PAGES_ENABLED=true"
        --env="GITLAB_PAGES_EXTERNAL_HTTP=1.1.1.1"
        --env="GITLAB_PAGES_EXTERNAL_HTTPS=1.1.1.1"
        --env="GITLAB_PROJECTS_SNIPPETS=true"
        --env="GITLAB_NOTIFY_PUSHER=true"
        --env="GITLAB_MATTERMOST_ENABLED=true"
        --env="GITLAB_RELATIVE_URL_ROOT=/git"
        --env="GITLAB_TRUSTED_PROXIES=1.1.1.1"
        --env="GITLAB_REGISTRY_ENABLED=true"
        --env="GITLAB_HTTPS=true"
        --env="NGINX_RETAIN_IP_HEADER=true"
        --env="SMTP_ENABLED=true"
        --env="IMAP_ENABLED=true"
        --env="OAUTH_ENABLED=true"
        --env="OAUTH_GOOGLE_API_KEY=${CI_COMMIT_SHA}"
        --env="OAUTH_GOOGLE_APP_SECRET=${CI_COMMIT_SHA}"
        --env="OAUTH_FACEBOOK_API_KEY=${CI_COMMIT_SHA}"
        --env="OAUTH_FACEBOOK_APP_SECRET=${CI_COMMIT_SHA}"
        --env="OAUTH_TWITTER_API_KEY=${CI_COMMIT_SHA}"
        --env="OAUTH_TWITTER_APP_SECRET=${CI_COMMIT_SHA}"
        --env="OAUTH_AUTHENTIQ_CLIENT_ID=${CI_COMMIT_SHA}"
        --env="OAUTH_AUTHENTIQ_CLIENT_SECRET=${CI_COMMIT_SHA}"
        --env="OAUTH_GITHUB_API_KEY=${CI_COMMIT_SHA}"
        --env="OAUTH_GITHUB_APP_SECRET=${CI_COMMIT_SHA}"
        --env="OAUTH_GITLAB_API_KEY=${CI_COMMIT_SHA}"
        --env="OAUTH_GITLAB_APP_SECRET=${CI_COMMIT_SHA}"
        --env="OAUTH_BITBUCKET_API_KEY=${CI_COMMIT_SHA}"
        --env="OAUTH_BITBUCKET_APP_SECRET=${CI_COMMIT_SHA}"
        --env="OAUTH_AUTH0_CLIENT_ID=${CI_COMMIT_SHA}"
        --env="OAUTH_AUTH0_CLIENT_SECRET=${CI_COMMIT_SHA}"
        --env="OAUTH_AUTH0_DOMAIN=example.com"
        --env="OAUTH_AZURE_API_KEY=${CI_COMMIT_SHA}"
        --env="OAUTH_AZURE_API_SECRET=${CI_COMMIT_SHA}"
        --env="OAUTH_AZURE_TENANT_ID=${CI_COMMIT_SHA}"
        --env="GOOGLE_ANALYTICS_ID=UA-123-ab"
        --env="GITALY_ENABLED=true"
        --env="VERBOSE=true"
        ${REGISTRY_IMAGE}
    - echo "Wait for gitlab to recompile assets ..."
    - while $(docker logs gitlab-test | tail -n 1 | grep -c "^Recompiling assets") != 0; do sleep 30; echo "Still waiting ..."; done
    - echo "Waiting for containers to start and settle, 90 seconds ..."
    - sleep 90
    - docker logs gitlab-test
    - export RC=0
    - if [[ $(docker logs gitlab-test | grep -i "error\|fail\|exit" | grep -c -i -v info) != 0 ]]; then export RC=1; fi
    - echo "Stopping and removing containers ..."
    - docker stop gitlab-test gitlab-redis gitlab-postgresql
    - docker rm -f gitlab-test gitlab-redis gitlab-postgresql
    - exit $RC
  except:
    - latest

tag-latest:
  image: docker:git
  stage: release
  script:
    - git config --global user.email "ci@gotfix.com"
    - git config --global user.name "CI Build"
    - git tag -fa latest -m "CI Build auto-tagged, latest master branch ref"
    - git push --force https://${ACCESS_USER}:${ACCESS_TOKEN}@gotfix.com/docker/gitlab.git refs/tags/latest
  only:
    - /^[0-9.]+$/

release:
  stage: release
  script:
    - echo "Automatic build configured, no need to push our build"
    - docker pull "${REGISTRY_IMAGE}"
    - docker tag "${REGISTRY_IMAGE}" "${REGISTRY_IMAGE_BASE}"
    - docker tag "${REGISTRY_IMAGE}" "${REGISTRY_IMAGE_BASE}:${IMAGE_TAG}"
    - docker tag "${REGISTRY_IMAGE}" "${REGISTRY_IMAGE_BASE}:latest"
    - docker push "${REGISTRY_IMAGE_BASE}"
    - docker push "${REGISTRY_IMAGE_BASE}:${IMAGE_TAG}"
    - docker push "${REGISTRY_IMAGE_BASE}:latest"
  only:
    - /^[0-9.-]+-stable$/
    - /^[0-9.]+$/
    - /^[0-9.]+-rc[0-9]+$/

github_mirror:
  type: mirror
  image: docker:git
  script:
    - mkdir -p "${WORK_DIR}/mirror" && cd "${WORK_DIR}/mirror"
    - git clone -q --mirror "${CI_REPOSITORY_URL}"
    - cd "${CI_PROJECT_NAME}.git"
    - git push -q --mirror "${GITHUB_REPO_URL}"
  when: always
