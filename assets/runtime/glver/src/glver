#!/bin/bash

GLVER_REGEX="^(0|[1-9][0-9]*)[-.]+(0|[1-9][0-9]*)[-.]+(0|stable|[1-9][0-9]*)(\.pre|\-[0-9A-Za-z-]+(\.[0-9A-Za-z-]+)*)?(\+[0-9A-Za-z-]+(\.[0-9A-Za-z-]+)*)?$"
######################

function error {
  echo -e "$1" >&2
  exit 1
}


function validate-version {
  local version=$1
  if [[ "$version" =~ $GLVER_REGEX ]]; then
    # if a second argument is passed, store the result in var named by $2
    if [ "$#" -eq "2" ]; then
      local major=${BASH_REMATCH[1]}
      local minor=${BASH_REMATCH[2]}
      local patch=${BASH_REMATCH[3]}
      local prere=${BASH_REMATCH[4]}
      local build=${BASH_REMATCH[5]}
      eval "$2=(\"$major\" \"$minor\" \"$patch\" \"$prere\" \"$build\")"
    else
      echo "$version"
    fi
  else
    error "version $version does not match the Gitlab versioning scheme. See README for more information."
  fi
}

function compare-version {
  validate-version "$1" V
  validate-version "$2" V_

  ## Gitlab version specific
  # Handle pre-release
  if [[ "${V[3]}" == ".pre" ]]; then V[2]=-1; fi
  if [[ "${V_[3]}" == ".pre" ]]; then V_[2]=-1; fi

  # Handle -stable release
  if [[ "${V[2]}" == "stable" ]]; then
    V[2]=0
    # Handle .pre and -rc[0-9]
    if [[ "${V_[2]}" != -1 ]]; then V_[2]=0; fi
    if ! [[ "${V_[3]}" =~ ^-rc([0-9]+)$ ]]; then V_[3]=""; fi
  fi
  if [[ "${V_[2]}" == "stable" ]]; then
    V_[2]=0
    # Handle .pre and -rc[0-9]
    if [[ "${V[2]}" != -1 ]]; then V[2]=0; fi
    if ! [[ "${V[3]}" =~ ^-rc([0-9]+)$ ]]; then V[3]=""; fi
  fi

  # Handle rc1, rc2, etc ...
  if [[ -n "${V[3]}" ]] && [[ "${V[3]}" =~ ^-rc([0-9]+)$ ]] && [[ "${V_[2]}" != -1 ]] && ! [[ "${V_[3]}" =~ ^-rc([0-9]+)$ ]]; then
    V_[3]="-zzz"
  fi
  if [[ -n "${V_[3]}" ]] && [[ "${V_[3]}" =~ ^-rc([0-9]+)$ ]] && [[ "${V[2]}" != -1 ]] && ! [[ "${V[3]}" =~ ^-rc([0-9]+)$ ]]; then
    V[3]="-zzz"
  fi


  # MAJOR, MINOR and PATCH should compare numericaly
  for i in 0 1 2; do
    local diff=$((${V[$i]} - ${V_[$i]}))
    if [[ $diff -lt 0 ]]; then
      echo -1; return 0
    elif [[ $diff -gt 0 ]]; then
      echo 1; return 0
    fi
  done

  # PREREL should compare with the ASCII order.
  if [[ -z "${V[3]}" ]] && [[ -n "${V_[3]}" ]]; then
    echo -1; return 0;
  elif [[ -n "${V[3]}" ]] && [[ -z "${V_[3]}" ]]; then
    echo 1; return 0;
  elif [[ -n "${V[3]}" ]] && [[ -n "${V_[3]}" ]]; then
    if [[ "${V[3]}" > "${V_[3]}" ]]; then
      echo 1; return 0;
    elif [[ "${V[3]}" < "${V_[3]}" ]]; then
      echo -1; return 0;
    fi
  fi

  echo 0
}

function gl_vercmp {
  local v1=$1
  local v2=$2

  compare-version "$v1" "$v2"
}
